pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket for host Docker access
    }
  }

  stages {

    /* --------------------------------
     * Stage 1: Checkout Source Code
     * -------------------------------- */
    stage('Checkout') {
      steps {
        script {
          echo "Checking out the repository..."
          git branch: 'main', url: 'https://github.com/AhmedGit-world/Jenkins-Zero-To-Hero.git'
        }
      }
    }

    /* --------------------------------
     * Stage 2: Build & Test with Maven
     * -------------------------------- */
    stage('Build and Test') {
      steps {
        sh '''
          set -e
          echo "Building Java Spring Boot application..."
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package -DskipTests
        '''
      }
    }

    /* --------------------------------
     * Stage 3: SonarQube Code Analysis
     * -------------------------------- */
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.137.11:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube-server', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            set -e
            echo "Running SonarQube code analysis..."
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN}
          '''
        }
      }
    }

    /* --------------------------------
     * Stage 4: Build and Push Docker Image
     * -------------------------------- */
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ahmed2472/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            set -e
            echo "Building Docker image..."
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''

          echo "Pushing Docker image to DockerHub..."
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            dockerImage.push()
          }
        }
      }
    }

    /* --------------------------------
     * Stage 5: Update Deployment YAML in GitHub
     * -------------------------------- */
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "AhmedGit-world"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            set -e
            echo "Updating Kubernetes deployment YAML with the latest image tag..."
            
            git config user.email "ahmed.5250@outlook.com"
            git config user.name "Ahmed1"
            
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          '''
        }
      }
    }
  }

  /* --------------------------------
   * Post Actions
   * -------------------------------- */
  post {
    success {
      echo "✅ Pipeline completed successfully!"
    }
    failure {
      echo "❌ Pipeline failed. Please check logs in Jenkins console."
    }
  }
}
